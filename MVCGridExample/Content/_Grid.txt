@using MVCGrid.Models
@model MVCGrid.Models.RenderingModel

@helper SortImage(Column col)
{
if (col.SortIconDirection.HasValue)
{
    switch (col.SortIconDirection)
    {
        case MVCGrid.Models.SortDirection.Asc:
                <img src='@(Model.HandlerPath)/sortup.png' alt='Sort up' class='pull-right' />
            break;
        case MVCGrid.Models.SortDirection.Dsc:
                <img src='@(Model.HandlerPath)/sortdown.png' alt='Sort down' class='pull-right' />
            break;
        case MVCGrid.Models.SortDirection.Unspecified:
                <img src='@(Model.HandlerPath)/sort.png' alt='Sort' class='pull-right' />
            break;
    }
}
}

@helper PageLink(int pageNum, string link, int currentPage)
{
string cls = "";
if (pageNum == currentPage)
{
    cls = "active";
}

var liClassAttr = !String.IsNullOrWhiteSpace(cls) ? String.Format(" class='{0}'", cls) : "";
    <li@(Html.Raw(liClassAttr))>
        <a href='#' aria-label='Page @pageNum' onclick='@Html.Raw(link)'>@pageNum</a>
        </li>
}
@helper PageNextLink(int pageToEnd, PagingModel pagingModel)
{
string cls = "";
if (pageToEnd == pagingModel.CurrentPage)
{
    cls = "disabled";
}
string onclick = "";
if (pageToEnd > pagingModel.CurrentPage)
{
    onclick = pagingModel.PageLinks[pagingModel.CurrentPage + 1];
}

        <li class='@Html.Raw(cls)'>
            <a href='#' aria-label='Next page' onclick='@(Html.Raw(onclick))'><span aria-hidden='true'>Next &raquo;</span></a>
        </li>
}
@helper PagePreviousLink(int pageToStart, PagingModel pagingModel)
{
string cls = "";
if (pageToStart == pagingModel.CurrentPage)
{
    cls = "disabled";
}
string onclick = "";
if (pageToStart < pagingModel.CurrentPage)
{
    onclick = pagingModel.PageLinks[pagingModel.CurrentPage - 1];
}

        <li class='@Html.Raw(cls)'>
            <a href='#' aria-label='Previous page' onclick='@(Html.Raw(onclick))'><span aria-hidden='true'>&laquo; Previous</span></a>
        </li>
}

@functions {
    string ColumnOnClick(Column col)
    {
        if (col.Onclick != null)
        {
            return col.Onclick;
        }
        return "return false;";
    }

    string ColumnStyle(Column col)
    {
        if (col.Onclick != null)
        {
            return "cursor: pointer;";
        }
        return "";
    }

    string RowClass(Row row)
    {
        if (row.CalculatedCssClass != null)
        {
            return row.CalculatedCssClass;
        }
        return "";
    }

    string CellClass(Cell cell)
    {
        if (cell.CalculatedCssClass != null)
        {
            return cell.CalculatedCssClass;
        }
        return "";
    }

    string RowOnClick(Row row)
    {
        if (row.SelectedRowFunction != null)
        {
            return row.SelectedRowFunction;
        }
        return "";
    }

    string RowOnClickParams(Row row)
    {
        if (row.SelectedRowParameter != null)
        {
            return row.SelectedRowParameter;
        }
        return "";
    }
}

<!--Partial View!-->
<table id='@Model.TableHtmlId' class='table table-striped table-bordered'>
    <thead>
        <tr>
            @foreach (var col in Model.Columns)
            {
                var thStyleAttr = !String.IsNullOrWhiteSpace(ColumnStyle(col)) ? String.Format(" style='{0}'", ColumnStyle(col)) : "";
                <th onclick='@Html.Raw(ColumnOnClick(col))' @(Html.Raw(thStyleAttr))>@col.HeaderText @(SortImage(col))</th>
            }
        </tr>
    </thead>
    <tbody>
        @foreach (var row in Model.Rows)
        {
            var trClassAttr = !String.IsNullOrWhiteSpace(RowClass(row)) ? String.Format(" class='{0}'", RowClass(row)) : "";
            var trOnClickCall = !String.IsNullOrWhiteSpace(RowOnClick(row)) ? (!String.IsNullOrWhiteSpace(RowOnClickParams(row)) ? String.Format(" onclick='{0}(\"{1}\")'", RowOnClick(row), RowOnClickParams(row)) : String.Format(" onclick='{0}'", RowOnClick(row))) : "";
            <tr@(Html.Raw(trClassAttr))>
                @foreach (var col in Model.Columns)
                {
                    var cell = row.Cells[col.Name];
                    var tdClassAttr = !String.IsNullOrWhiteSpace(CellClass(cell)) ? String.Format(" class='{0}'", CellClass(cell)) : "";
                    <td@(Html.Raw(tdClassAttr))>
                        @Html.Raw(cell.HtmlText)</td>
                }
                </tr>
        }
</tbody>
</table>

@if (Model.PagingModel != null)
{
    var pagingModel = Model.PagingModel;
    int pageToStart;
    int pageToEnd;
    pagingModel.CalculatePageStartAndEnd(5, out pageToStart, out pageToEnd);

    <div class='row'>
        <div class='col-xs-6'>
            Showing @pagingModel.FirstRecord to @pagingModel.LastRecord of @pagingModel.TotalRecords entries
        </div>
        <div class='col-xs-6'>
            <ul class='pagination pull-right' role='navigation' aria-label='Pagination' style='margin-top: 0;'>
                @PagePreviousLink(pageToStart, pagingModel)
                @for (int i = pageToStart; i <= pageToEnd; i++)
                {
                    @PageLink(i, pagingModel.PageLinks[i], pagingModel.CurrentPage)
                }
                @PageNextLink(pageToEnd, pagingModel)
            </ul>
        </div>
    </div>
}

@Html.Raw(Model.ClientDataTransferHtmlBlock)
